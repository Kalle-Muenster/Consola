/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      ConsolaUtils.cpp                           ||
||     Author:    Autogenerated                              ||
||     Generated: 25.03.2022                                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#include <settings.h>
#include <process.h>

#include <.byteOrder.h>

using namespace   System;
using namespace   System::Collections::Generic;
using namespace   System::IO;
using namespace   System::Threading::Tasks;
using namespace   System::Threading;

#include "ConsolaLogger.hpp"
#include "ConsolaStream.hpp"
#include "ConsolaAuxilary.hpp"
#include "ConsolaUtils.hpp"

#include <enumoperators.h>


unsigned
Consola::Utility::VersionNumber()
{
    return CONSOLA_VERSION_NUMBER;
}

String^
Consola::Utility::VersionString()
{
    return gcnew String(CONSOLA_VERSION_STRING);
}

System::String^
Consola::Utility::ProgramName()
{
    return System::Diagnostics::Process::GetCurrentProcess()->ProcessName;
}

System::Int32
Consola::Utility::ProgramProc()
{
    return System::Diagnostics::Process::GetCurrentProcess()->Id;
}

System::String^
Consola::Utility::MachineName()
{
    return System::Diagnostics::Process::GetCurrentProcess()->MachineName;
}

System::String^
Consola::Utility::MachineArch()
{
#ifdef _WIN64
    String^ bits = "64bit ";
#elif _WIN32
    String^ bits = "32bit ";
#endif
    return bits + IS_BIG_ENDIAN()
        ? String::Format("x86 {0} (BigEndian)", bits)
        : String::Format("CPU {0} (LittleEndian)", bits);
}

int
Consola::Utility::CommandExec( String^ command, Flags flags, ...array<Object^>^ args )
{
    int result = -1;
    if (!enum_utils::anyFlag(flags, Flags::Asynch | Flags::Detach)) {
        array<byte>^ Cmd = System::Text::Encoding::Default->GetBytes( command );
        pin_ptr<byte> cmdptr( &Cmd[0] );
        const char* cmd = (const char*)cmdptr;
        while (*++cmd);
        while (*--cmd) if (*cmd == '\\') break;
        if (! *cmd ) {
            array<byte>^ Wrk = System::Text::Encoding::Default->GetBytes( Directory::GetCurrentDirectory() );
            pin_ptr<byte> wrkptr( &Wrk[0] );
            const char* wrk = (const char*)wrkptr;
            uint val = StdStream::keygenerator->Next(_CRT_INT_MAX);
            while( !StdStream::Inp->lockup(val) ) {
                Thread::Sleep( THREAD_WAITSTATE_CYCLE_TIME * 5 );
            } cmd = merge( wrk, cmd );
        } else {
            cmd = (const char*)cmdptr;
        } result = system( cmd );
    } else {
        Dictionary<String^,String^>^ environment = nullptr;
        System::Text::StringBuilder^ parameters = nullptr;
        Delegate^ onexit = nullptr;
        if (args) {
            for (int x = 0; x < args->Length; ++x ) {
                if ( args[x]->GetType() == array<String^>::typeid ) {
                    array<String^>^ strarg = safe_cast<array<String^>^>( args[x] );
                    parameters = gcnew System::Text::StringBuilder( strarg[0] );
                    for (int i = 1; i < strarg->Length; ++i)
                        parameters->Append(String::Format(" {0}", args[i]));
                } else if (args[x]->GetType() == String::typeid) {
                    parameters = gcnew System::Text::StringBuilder( args[0]->ToString() );
                } else if (args[x]->GetType() == Dictionary<String^,String^>::typeid) {
                    environment = safe_cast<Dictionary<String^,String^>^>( args[x] );
                } else if (args[x]->GetType() == ProcessFinishedDelegate::typeid) {
                    onexit = safe_cast<ProcessFinishedDelegate^>( args[x] );
                    enum_utils::addFlag( flags, Flags::Hidden );
                } else if ( args[x]->GetType() == Action<int>::typeid ) {
                    onexit = safe_cast<Action<int>^>( args[x] );
                }
            }
        }
        System::Diagnostics::ProcessStartInfo^ setuproc;
        if( parameters ) {
            setuproc = gcnew System::Diagnostics::ProcessStartInfo(
                command, parameters->ToString()
            );
        } else {
            setuproc = gcnew System::Diagnostics::ProcessStartInfo(
                command
            );
        }
        setuproc->RedirectStandardOutput = !enum_utils::hasFlag(flags, Flags::Detach);
        setuproc->RedirectStandardError = !enum_utils::hasFlag(flags, Flags::Detach);
        setuproc->CreateNoWindow = enum_utils::hasFlag( flags, Flags::Hidden );
        setuproc->UseShellExecute = false;
        setuproc->WorkingDirectory = StdStream::Cwd;
        if( environment ) {
            IEnumerator<KeyValuePair<String^,String^>>^ it = environment->GetEnumerator();
            while (it->MoveNext()) {
                setuproc->Environment->Add( it->Current.Key, it->Current.Value );
            } it->~IEnumerator<KeyValuePair<String^,String^>>();
        }
        
        System::Diagnostics::Process^ proc = gcnew System::Diagnostics::Process();
        proc->StartInfo = setuproc;
        if ( !enum_utils::hasFlag( flags, Flags::Detach ) ) {
            proc->EnableRaisingEvents = true;
            if ( !enum_utils::hasFlag(flags, Flags::Hidden) ) {
                proc->ErrorDataReceived += StdStream::Err->GetDelegate();
                proc->OutputDataReceived += StdStream::Out->GetDelegate();
            } proc->Exited += gcnew EventHandler(ended);
        } if ( proc->Start() ) {
            result = proc->Id;
            if ( onexit != nullptr ) {
                if (onexit->GetType() == ProcessFinishedDelegate::typeid)
                    exits->Add( result, dynamic_cast<ProcessFinishedDelegate^>(onexit) );
                else {
                    proc->BeginErrorReadLine();
                    proc->BeginOutputReadLine();
                    axits->Add( result, dynamic_cast<Action<int>^>(onexit) );
                }
            }
        }
    } return result;
}

int
Consola::Utility::CommandExec( String^ command, Action<int>^ onexit )
{
    String^ parameters = String::Empty;
    if (command[0] == '\"') {
        int split = command->IndexOf('\"', 1) + 1;
        parameters = command->Substring(split);
        command = command->Substring(0,split);
    } else if ( command->Contains(" ") ) {
        int split = command->IndexOf(" ") + 1;
        parameters = command->Substring(split);
        command = command->Substring(0, split);
    }
    
    return CommandExec( command, Flags::Asynch, parameters, onexit );
}


int
Consola::Utility::CommandExec( String^ command )
{
    return CommandExec( command, Flags::Simple );
}

void
Consola::Utility::ended(Object^ sender, EventArgs^ e)
{
    System::Diagnostics::Process^ proc = dynamic_cast<System::Diagnostics::Process^>( sender );
    if (exits->ContainsKey(proc->Id)) {
        exits[proc->Id]( proc->ExitCode, proc->StandardOutput->ReadToEnd(), proc->StandardError->ReadToEnd() );
        exits->Remove( proc->Id );
    } else if( axits->ContainsKey( proc->Id ) ) {
        Thread::Sleep(THREAD_WAITSTATE_CYCLE_TIME * 100);
        proc->ErrorDataReceived -= StdStream::Err->GetDelegate();
        proc->OutputDataReceived -= StdStream::Out->GetDelegate();
        axits[proc->Id]( proc->ExitCode );
        axits->Remove( proc->Id );
    }
    proc->Exited -= gcnew EventHandler(ended);
    proc->~Process();
}

