/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      ConsolaAuxilary.cpp                        ||
||     Author:    Autogenerated                              ||
||     Generated: 23.02.2022                                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#include <settings.h>
#include <.byteOrder.h>


using namespace   System;
using namespace   System::IO;
using namespace   System::Threading::Tasks;
using namespace   System::Threading;


#include "ConsolaLogger.hpp"
#include "ConsolaStream.hpp"
#include "ConsolaAuxilary.hpp"


Consola::AuxilaryStream::AuxilaryStream( fourCC name )
    : StdStream( Direction::Aux )
    , typ(name)
{
    if (auxeen == nullptr) {
        auxeen = gcnew array<fourCC>(1) { name };
        auxtrm = gcnew array<AuxilaryStream^>(1) { this };
        aux = this;
    }
    else auxtrm[extendRaum(typ, Direction::Inp)] = this;
}


Consola::AuxilaryStream::~AuxilaryStream()
{
    extendRaum(typ, Direction::Out);
}

Consola::AuxXml::AuxXml(void)
    : AuxilaryStream( byteOrder_stringTOfourCC("Xml") )
{
    scope = State::NoScope;
    depth = -1;
    state = nullptr;
}

Consola::AuxXml^
Consola::AuxilaryStream::Xml::get(void)
{
    for (int idx = 0; idx < auxeen->Length; ++idx)
        if (auxeen[idx] == byteOrder_stringTOfourCC("Xml"))
            return (AuxXml^)auxtrm[idx];
    return nullptr;
}

int
Consola::AuxilaryStream::extendRaum( unsigned des, Direction how) {
    switch (how) {
    case Direction::Out: {
        int size = auxeen->Length;
        array<AuxilaryStream^>^ raumExtender = gcnew array<AuxilaryStream^>(auxtrm->Length + 1);
        array<unsigned>^ nameExtender = gcnew array<unsigned>(auxeen->Length + 1);
        auxtrm->CopyTo(raumExtender, 0);
        auxeen->CopyTo(nameExtender, 0);
        auxtrm = raumExtender;
        auxeen = nameExtender;
        auxeen[size] = des;
        return size;
    } break;
    case Direction::Inp: {
        if (auxtrm->Length > 1) {
            int position = auxeen->Length - 1;
            array<AuxilaryStream^>^ raumExtender = gcnew array<AuxilaryStream^>(auxtrm->Length - 1);
            array<unsigned>^ nameExtender = gcnew array<unsigned>(auxeen->Length - 1);
            for (int i = position, n = position - 1; i >= 0; --i, --n) {
                if (auxeen[i] != des) {
                    raumExtender[n] = auxtrm[i];
                    nameExtender[n] = auxeen[i];
                }
                else position = n++;
            }
            auxtrm = raumExtender;
            auxeen = nameExtender;
            return position;
        }
        else {
            auxtrm = nullptr;
            auxeen = nullptr;
            return 0;
        }
    } break;
    default: how = Direction::Err; break;
    }
}
/*
int
Consola::AuxXml::Write( System::Object^ content )
{
    NewScope(State::Content);
    Log->Write(content->ToString());
    return depth;
}

int 
Consola::AuxXml::WriteElement( String^ tagname, ...array<Object^>^ attribute )
{
    if (scope >= State::Element) {
        NewScope(State::Element);
    }
    ++depth;
    state = tagname;
    scope = State::Attribute;
    log->Write(String::Format("<{0}", tagname));
    for (int i = 0; i < attribute->Length; ++i) {
        String^ a = attribute[i]->ToString();
        if (a->Contains("=")) {
            array<String^>^ kv = a->Split('=');
            WriteAttribute(kv[0], kv[1]);
        } else {
            WriteAttribute(a,nullptr);
        }
    } return depth;
    
}

int
Consola::AuxXml::WriteAttribute( String^ name, Object^ value )
{
    if (scope == State::Element) scope == State::Attribute;
    if (scope == State::Attribute) {
        if(value!=nullptr) log->Write( String::Format(" {0}=\"{1}\"", name, value->ToString() ) );
        else log->Write(" " + name);
        return depth;
    } return -1;
}

generic<class T> int
Consola::AuxXml::WriteData( array<T>^ data )
{
    return -1;
}

int
Consola::AuxXml::WriteNode( System::Xml::XmlNode^ node )
{
    Log->WriteLine(node->OuterXml);
    return depth;
}

Consola::AuxXml::State
Consola::AuxXml::Scope::get(void)
{
    return scope;
}

bool
Consola::AuxXml::IsInput::get(void)
{
    return false;
}

*/