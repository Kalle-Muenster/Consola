/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      ConsolaAuxilary.cpp                        ||
||     Author:    Autogenerated                              ||
||     Generated: 23.02.2022                                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
/*
#include <settings.h>
#include "ConsolaStream.hpp"
#include "ConsolaAuxilary.hpp"

using namespace   System;
using namespace   System::IO;
using namespace   System::Threading::Tasks;
using namespace   System::Threading;
const char*       EmptyString = "\0";



int
Consola::AuxXml::Write( System::Object^ content )
{
    NewScope(State::Content);
    Log->Write(content->ToString());
    return depth;
}

int 
Consola::AuxXml::WriteElement( String^ tagname, ...array<Object^>^ attribute )
{
    if (scope >= State::Element) {
        NewScope(State::Element);
    }
    ++depth;
    state = tagname;
    scope = State::Attribute;
    log->Write(String::Format("<{0}", tagname));
    for (int i = 0; i < attribute->Length; ++i) {
        String^ a = attribute[i]->ToString();
        if (a->Contains("=")) {
            array<String^>^ kv = a->Split('=');
            WriteAttribute(kv[0], kv[1]);
        } else {
            WriteAttribute(a,nullptr);
        }
    } return depth;
    
}

int
Consola::AuxXml::WriteAttribute( String^ name, Object^ value )
{
    if (scope == State::Element) scope == State::Attribute;
    if (scope == State::Attribute) {
        if(value!=nullptr) log->Write( String::Format(" {0}=\"{1}\"", name, value->ToString() ) );
        else log->Write(" " + name);
        return depth;
    } return -1;
}

generic<class T> int
Consola::AuxXml::WriteData( array<T>^ data )
{
    return -1;
}

int
Consola::AuxXml::WriteNode( System::Xml::XmlNode^ node )
{
    Log->WriteLine(node->OuterXml);
    return depth;
}

Consola::AuxXml::State
Consola::AuxXml::Scope::get(void)
{
    return scope;
}

bool
Consola::AuxXml::IsInput::get(void)
{
    return false;
}

*/