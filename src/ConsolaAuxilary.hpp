/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      ConsolaAuxilary.hpp                        ||
||     Author:    Autogenerated                              ||
||     Generated: 23.02.2022                                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#ifndef _ConsolaAuxilary_hpp_
#define _ConsolaAuxilary_hpp_


using namespace System::Xml;


namespace Consola
{
    ref class AuxXml;
    ref class StdStream;

    public ref class AuxilaryStream
        : public StdStream
    {
    private:
        static int extendRaum( unsigned des, Direction how );
    
    protected:
        const unsigned typ;

    internal:
        static volatile uint lockvar = EMPTY;
       
        static array<unsigned>^        auxeen;
        static array<AuxilaryStream^>^ auxtrm;

        AuxilaryStream( unsigned name );
        virtual ~AuxilaryStream();

        virtual bool lockup( uint key ) override {
            if (lockvar == EMPTY) {
                lockvar = key;
            } return lockvar == key;
        }
        virtual bool unlock( uint key ) override {
            if (lockvar == key) {
                lockvar = EMPTY;
            } return lockvar == EMPTY;
        }
        virtual bool locked(void) override {
            return lockvar != EMPTY;
        }

    public:
        property LogWriter^ Log {
            virtual LogWriter^ get( void ) override;
            virtual void set( LogWriter^ value ) override;
        }

        virtual String^ ToString( void ) override {
            return String::Format( "{0}_{1}.log", this->nam, typ );
        }

        property AuxXml^ Xml {
            AuxXml^ get(void);
        }
    };

    public ref class AuxXml
        : public AuxilaryStream
    {
    internal:
        AuxXml( void );

    public:
        enum class State { 
            NoScope, Document, Element,
            Attribute, Content, CData,
            Comment
        };

        void    CloseScope( void );
        void    WriteNode( XmlNode^ node );
        void    WriteContent( String^ format, ...array<Object^>^ objects );
        void    WriteElement( String^ tagname, ...array<String^>^ attributes );
        void    WriteAttribute( String^ name, Object^ value );
        void    NewScope( State newScope );

        void closeLog(void) override {
            while( depth >= 0 && scope > State::NoScope ) {
                CloseScope();
            }
        }

        virtual property LogWriter^ Log {
            LogWriter^ get(void) override;
            void set(LogWriter^ logger) override;
        }

        property bool IsInput {
            bool get(void) { return false; }
        }

        property State Scope {
            State get(void) { return scope; }
        }

        property int Depth { 
            int get(void) { return depth; }
        }

    private:

        int depth;
        State scope;
        System::Collections::Generic::List<String^>^ states;
        String^ state;
    };

} //end of Consola

#endif
